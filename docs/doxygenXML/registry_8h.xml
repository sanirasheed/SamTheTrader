<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="registry_8h" kind="file" language="C++">
    <compoundname>registry.h</compoundname>
    <includes local="yes">any</includes>
    <includes refid="data__transform_8h" local="yes">data_transform.h</includes>
    <includes local="yes">functional</includes>
    <includedby refid="fib__retrace_8h" local="yes">sam/trading_sim/cpp/src/transforms/fib_retrace.h</includedby>
    <incdepgraph>
      <node id="6">
        <label>functional</label>
      </node>
      <node id="3">
        <label>data_transform.h</label>
        <link refid="data__transform_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>any</label>
      </node>
      <node id="4">
        <label>common/namespace.h</label>
      </node>
      <node id="1">
        <label>sam/trading_sim/cpp/src/transforms/registry.h</label>
        <link refid="registry_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>sam/trading_sim/cpp/src/transforms/fib_retrace.h</label>
        <link refid="fib__retrace_8h_source"/>
      </node>
      <node id="1">
        <label>sam/trading_sim/cpp/src/transforms/registry.h</label>
        <link refid="registry_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structsam__trader_1_1transform_1_1RegistryWrapper" prot="public">sam_trader::transform::RegistryWrapper</innerclass>
    <innerclass refid="structsam__trader_1_1transform_1_1Registry" prot="public">sam_trader::transform::Registry</innerclass>
    <innernamespace refid="namespacesam__trader">sam_trader</innernamespace>
    <innernamespace refid="namespacesam__trader_1_1transform">sam_trader::transform</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="registry_8h_1aea2eaf0cf949965cb7885c8edf3a5d5e" prot="public" static="no">
        <name>REGISTER_TRANSFORM</name>
        <param><defname>Class</defname></param>
        <param><defname>name</defname></param>
        <initializer>    const int Class##RegistryCode = transformRegistry.registerTransform( \
        #name, \
        [](BarColumns priceNames, Args const&amp; args) { return std::make_unique&lt;Class&gt;(std::move(priceNames), args); });</initializer>
        <briefdescription>
<para>Macro to register a transformation class with the registry. </para>
        </briefdescription>
        <detaileddescription>
<para>The global registry of transformation functions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Class</parametername>
</parameternamelist>
<parameterdescription>
<para>The class to be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the class in the registry. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sam/trading_sim/cpp/src/transforms/registry.h" line="73" column="9" bodyfile="sam/trading_sim/cpp/src/transforms/registry.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains definitions for the Transform Registry. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>dewe<sp/>on<sp/>1/10/23.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;any&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="data__transform_8h" kindref="compound">data_transform.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;functional&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">sam_trader::transform<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="registry_8h_1a4236224a1365416ccfbbe9a9007fe68f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="registry_8h_1a4236224a1365416ccfbbe9a9007fe68f" kindref="member">Args</ref><sp/>=<sp/>std::vector&lt;double&gt;;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="registry_8h_1a195743913cd58d3906e0ffd472c27263" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="registry_8h_1a195743913cd58d3906e0ffd472c27263" kindref="member">FunctionInterface</ref><sp/>=<sp/>std::function&lt;std::unique_ptr&lt;DataTransform&gt;(BarColumns,<sp/><ref refid="registry_8h_1a4236224a1365416ccfbbe9a9007fe68f" kindref="member">Args</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)&gt;;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="structsam__trader_1_1transform_1_1RegistryWrapper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsam__trader_1_1transform_1_1RegistryWrapper" kindref="compound">RegistryWrapper</ref></highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36" refid="structsam__trader_1_1transform_1_1RegistryWrapper_1aea3fca8d3a0d0d6e41954d9b544da990" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unordered_map&lt;std::string,<sp/>FunctionInterface&gt;<sp/><ref refid="structsam__trader_1_1transform_1_1RegistryWrapper_1aea3fca8d3a0d0d6e41954d9b544da990" kindref="member">registry</ref>;<sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal">};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="structsam__trader_1_1transform_1_1Registry" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsam__trader_1_1transform_1_1Registry" kindref="compound">Registry</ref></highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>registerTransform(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/><ref refid="registry_8h_1a195743913cd58d3906e0ffd472c27263" kindref="member">FunctionInterface</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>func)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impl.<ref refid="structsam__trader_1_1transform_1_1RegistryWrapper_1aea3fca8d3a0d0d6e41954d9b544da990" kindref="member">registry</ref>.insert({<sp/>name,<sp/>func<sp/>});</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="structsam__trader_1_1transform_1_1Registry_1ad55d367c20dfeaa7211bc823ffa8f763" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="registry_8h_1a195743913cd58d3906e0ffd472c27263" kindref="member">FunctionInterface</ref><sp/><ref refid="structsam__trader_1_1transform_1_1Registry_1ad55d367c20dfeaa7211bc823ffa8f763" kindref="member">get</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="54"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(impl.<ref refid="structsam__trader_1_1transform_1_1RegistryWrapper_1aea3fca8d3a0d0d6e41954d9b544da990" kindref="member">registry</ref>.contains(name))</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl.<ref refid="structsam__trader_1_1transform_1_1RegistryWrapper_1aea3fca8d3a0d0d6e41954d9b544da990" kindref="member">registry</ref>.at(name);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>in<sp/>Transform<sp/>Registry&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsam__trader_1_1transform_1_1RegistryWrapper" kindref="compound">RegistryWrapper</ref><sp/>impl;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Registry<sp/>transformRegistry;<sp/></highlight></codeline>
<codeline lineno="73" refid="registry_8h_1aea2eaf0cf949965cb7885c8edf3a5d5e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REGISTER_TRANSFORM(Class,<sp/>name)<sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>const<sp/>int<sp/>Class##RegistryCode<sp/>=<sp/>transformRegistry.registerTransform(<sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#name,<sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](BarColumns<sp/>priceNames,<sp/>Args<sp/>const&amp;<sp/>args)<sp/>{<sp/>return<sp/>std::make_unique&lt;Class&gt;(std::move(priceNames),<sp/>args);<sp/>});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>sam_trader::transform</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="sam/trading_sim/cpp/src/transforms/registry.h"/>
  </compounddef>
</doxygen>
